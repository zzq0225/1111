第一题
import numpy as np
from numpy import

n = int(input())
arr = []
for i in range(n):
	arr.(list(map(int, input().rstrip().split())))
B=np.linalg.inv(arr)
except:
print("矩阵不存在逆矩阵")
else:
print(arr)


第二题
#include <vector>
#include <iostream>
using namespace std;

vector<vector<double>> make_zero_martix(int n) {
	vector<vector<double>> array;
	vector<double> temparay;
	for (int i = 0; i < n; ++i) { 
		for (int j = 0; j < n; ++j)
			temparay.push_back(i * j);
		array.push_back(temparay);
		temparay.erase(temparay.begin(), temparay.end());
	}
	return array;
}


double getA(vector<vector<double>> arcs, int n) {
	if (n == 1) {
		return arcs[0][0];
	}
	double ans = 0;
	vector<vector<double>> temp = make_zero_martix(arcs.size());
	int i, j, k;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n - 1; j++) {
			for (k = 0; k < n - 1; k++) {
				temp[j][k] = arcs[j + 1][(k >= i) ? k + 1 : k];
			}
		}
		double t = getA(temp, n - 1);
		if (i % 2 == 0) {
			ans += arcs[0][i] * t;
		} else {
			ans -= arcs[0][i] * t;
		}
	}
	return ans;
}


void  getAStart(vector<vector<double>> arcs, int n, vector<vector<double>> &ans) {
	if (n == 1) {
		ans[0][0] = 1;
		return;
	}
	int i, j, k, t;
	vector<vector<double>> temp = make_zero_martix(n);
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			for (k = 0; k < n - 1; k++) {
				for (t = 0; t < n - 1; t++) {
					
					temp[k][t] = arcs[k >= i ? k + 1 : k][t >= j ? t + 1 : t];
				}
			}
			ans[j][i] = getA(temp, n - 1);  
			if ((i + j) % 2 == 1) {
				ans[j][i] = -ans[j][i];
			}
		}
	}
}


bool GetMatrixInverse(vector<vector<double>> src, int n, vector<vector<double>> &des) {
	double flag = getA(src, n);
	vector<vector<double>> t = make_zero_martix(n);
	if (0 == flag) {
		cout << "原矩阵行列式为0，无法求逆。请重新运行" << endl;
		return false;
	} else {
		getAStart(src, n, t);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				des[i][j] = t[i][j] / flag;
			}
		}
	}
	return true;
}

vector<vector<double>> inverse(vector<vector<double>> matrix_before) {
	
	bool flag;
	vector<vector<double>> matrix_after = make_zero_martix(matrix_before.size());
	flag = GetMatrixInverse(matrix_before, matrix_before.size(), matrix_after);
	return matrix_after;
}


int main() {
	int n;
	vector<vector<int>> array;
	vector<int>w;
	while (cin >> n) {

		int temp;
		for (int i = 0; i < n; i++) {


			vector<int>w;
			for (int j = 0; j < n; j++) {
				cin >> temp;
				w.push_back(temp);


			}
			array.push_back(w);

		}



	}


for (int i = 0; i < n; i++) {
		cout << w.at(i) << " ";
	}
	return 0;
}



第四题
#include <bits/stdc++.h>
using namespace std;


int judge(string s) {
	for (int i = 0; i < s.size(); i ++) {
		if (s[i] == '.')
			return 2;
		else if (s[i] == '%')
			return 4;
		else if (s[i] == '/')
			return 3;
	}

	return 1;
}

void print(string s) {
	reverse(s.begin(), s.end());
	int j = 0;
	while (j < s.size() && s[j] == '0')
		j ++;

	for (int i = j; i < s.size(); i ++)
		cout << s[i];
	if (j == s.length())
		cout << 0;
}

void print1(string s) {
	reverse(s.begin(), s.end());
	int len = s.length();
	string temp = "";
	for (int i = 0; i < len; i ++)
		temp += "0";

	if (s == temp)
		cout << 0;
	else {
		int cnt = 0;
		for (int i = (int)s.size() - 1; i >= 0; i --) {
			if (s[i] == '0')
				cnt ++;
			else
				break;
		}

		int x = len - cnt;
		cout << s.substr(0, x);
	}
}

void solve(string s, int type) {
	if (type == 1) {
		print(s);
	} else if (type == 4) {
		int len = s.length();
		string s1 = s.substr(0, len - 1);
		print(s1);

		cout << "%" << '\n';
	} else if (type == 3) {
		int index;
		for (int i = 0; i < s.size(); i ++) {
			if (s[i] == '/') {
				index = i;
				break;
			}
		}

		string s1 = s.substr(0, index);
		string s2 = s.substr(index + 1);

		print(s1);
		cout << "/";
		print(s2);
	} else if (type == 2) {
		int index;
		for (int i = 0; i < s.size(); i ++) {
			if (s[i] == '.') {
				index = i;
				break;
			}
		}

		string s1 = s.substr(0, index);
		string s2 = s.substr(index + 1);

		print(s1);
		cout << ".";
		print1(s2);
	}
}

int main() {
	string s;
	cin >> s;

	int type = judge(s);
	solve(s, type);

	return 0;
}

第五题
#include <bits/stdc++.h>

using namespace std;

class Vector {
	private:

		double x;
		double y;

	public:

		Vector(double xx, double yy) {
			x = xx, y = yy;
		}


		Vector add(const Vector &other) const {
			return Vector(x + other.x, y + other.y);
		}


		void print() const {
			cout << "向之值和: x = " << x << ", y = " << y << endl;
		}


		void dir() const {
			double mo = sqrt(x * x + y * y);
			cout << "模长: " << mo << endl;
		}
};

int main() {
	Vector v1(3.0, 4.0);
	Vector v2(1.0, 2.0);


	Vector v3 = v1.add(v2);
	v3.print();


	v3.dir();
	v1.print();
	v2.print();
	return 0;
}






使用说明


第一题
用append输入矩阵
用np.linalg函数返回逆矩阵


第二题
构造函数1：创建0矩阵，n*n 维数组
构造函数2：按第一行展开计算|A|
构造函数3：计算每一行每一列的每个元素所对应的余子式，组成A*，顺便进行转置。
得到给定矩阵src的逆矩阵保存到des中，如果算出矩阵的行列式为0，则不往下进行。
矩阵求逆。






第四题
分四种情况，整数，小数，分数，百分数
Return1 是整数：
用reverse函数 反转字符串
Return2 是小数：
判断小数点的位置，小数点之前之后分别用reverse
Return3 是分数：
判断分号的位置，分号之前之后分别用reverse
Return4 是百分数：
判断百分号的位置，百分号之前之后分别用reverse









